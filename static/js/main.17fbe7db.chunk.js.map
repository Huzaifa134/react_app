{"version":3,"sources":["components/About.js","components/Alerts.js","components/Form.js","components/Navbar.js","App.js","reportWebVitals.js","index.js"],"names":["About","props","mystyle","color","mode","backgroundColor","react_default","a","createElement","className","style","id","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","aria-labelledby","data-bs-parent","Alerts","height","alert","concat","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capatlize","msg","Form","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","heading","value","onChange","event","console","log","target","rows","onClick","newText","showAlert","SpeechSynthesisUtterance","window","speechSynthesis","speak","res","match","join","split","reverse","filter","element","length","Navbar","react_router_dom","to","aria-label","aria-current","title","titleabout","colorPallet","colorPallet2","colorPallet3","placeholder","toggleMode","htmlFor","defaultProps","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","document","body","components_Alerts","react_router","exact","path","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","getElementById"],"mappings":"wOAGe,SAASA,EAAMC,GAO5B,IAAIC,EAAU,CACZC,MAAsB,SAAfF,EAAMG,KAAkB,QAAU,QACzCC,gBAAgC,SAAfJ,EAAMG,KAAkB,OAAS,SAGpD,OACEE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAiBC,MAAOR,GACrCI,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYE,GAAG,oBAC5BL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAmBE,GAAG,cAClCL,EAAAC,EAAAC,cAAA,UACEC,UAAU,mBACVC,MAAOR,EACPU,KAAK,SACLC,iBAAe,WACfC,iBAAe,eACfC,gBAAc,OACdC,gBAAc,eAPhB,sBAYFV,EAAAC,EAAAC,cAAA,OACEG,GAAG,cACHF,UAAU,mCACVQ,kBAAgB,aAChBC,iBAAe,qBAEfZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAiBC,MAAOR,GACrCI,EAAAC,EAAAC,cAAA,0DADF,6WAOmCF,EAAAC,EAAAC,cAAA,+BAPnC,kDAYJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAmBE,GAAG,cAClCL,EAAAC,EAAAC,cAAA,UACEC,UAAU,6BACVC,MAAOR,EACPU,KAAK,SACLC,iBAAe,WACfC,iBAAe,eACfC,gBAAc,QACdC,gBAAc,eAPhB,sBAYFV,EAAAC,EAAAC,cAAA,OACEG,GAAG,cACHF,UAAU,8BACVQ,kBAAgB,aAChBC,iBAAe,qBAEfZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAiBC,MAAOR,GACrCI,EAAAC,EAAAC,cAAA,2DADF,8WAOmCF,EAAAC,EAAAC,cAAA,+BAPnC,kDAYJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAmBE,GAAG,gBAClCL,EAAAC,EAAAC,cAAA,UACEC,UAAU,6BACVC,MAAOR,EACPU,KAAK,SACLC,iBAAe,WACfC,iBAAe,iBACfC,gBAAc,QACdC,gBAAc,iBAPhB,sBAYFV,EAAAC,EAAAC,cAAA,OACEG,GAAG,gBACHF,UAAU,8BACVQ,kBAAgB,eAChBC,iBAAe,qBAEfZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAiBC,MAAOR,GACrCI,EAAAC,EAAAC,cAAA,0DADF,8WAOmCF,EAAAC,EAAAC,cAAA,+BAPnC,oDC5EGW,MAzBf,SAAgBlB,GAKd,OACEK,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAAEU,OAAQ,SACnBnB,EAAMoB,OACLf,EAAAC,EAAAC,cAAA,OACEC,UAAS,eAAAa,OAAiBrB,EAAMoB,MAAMT,KAA7B,gCACTW,KAAK,SAELjB,EAAAC,EAAAC,cAAA,cAXU,SAACgB,GACjB,IAAMC,EAAQD,EAAKE,cACnB,OAAOD,EAAME,OAAO,GAAGC,cAAgBH,EAAMI,MAAM,GASpCC,CAAU7B,EAAMoB,MAAMT,OAJjC,KAImDX,EAAMoB,MAAMU,OCZxD,SAASC,EAAK/B,GAE3B,IAFkCgC,EAsDVC,mBAAS,IAtDCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAsD3BK,EAtD2BH,EAAA,GAsDrBI,EAtDqBJ,EAAA,GAyDlC,OACE7B,EAAAC,EAAAC,cAAAF,EAAAC,EAAAiC,SAAA,KACElC,EAAAC,EAAAC,cAAA,OACEC,UAAU,YACVC,MAAO,CACLP,MAAsB,SAAfF,EAAMG,KAAkB,QAAU,UAG3CE,EAAAC,EAAAC,cAAA,UAAKP,EAAMwC,SACXnC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,YACEE,MAAO,CACLL,gBAAgC,SAAfJ,EAAMG,KAAkB,UAAY,QACrDD,MAAsB,SAAfF,EAAMG,KAAkB,QAAU,SAE3CK,UAAU,eACViC,MAAOJ,EACPK,SAzBa,SAACC,GACtBC,QAAQC,IAAI,cACZP,EAAQK,EAAMG,OAAOL,QAwBb/B,GAAG,8BACHqC,KAAK,OAGT1C,EAAAC,EAAAC,cAAA,UAAQC,UAAU,4BAA4BwC,QA7E9B,WACpBJ,QAAQC,IAAI,0BAA4BR,GACxC,IAAMY,EAAUZ,EAAKV,cACrBW,EAAQW,GACRjD,EAAMkD,UAAU,2BAA4B,aAyExC,wBAGA7C,EAAAC,EAAAC,cAAA,UAAQC,UAAU,4BAA4BwC,QAtE7B,WACrBJ,QAAQC,IAAI,0BAA4BR,GACxC,IAAMY,EAAUZ,EAAKZ,cACrBa,EAAQW,GACRjD,EAAMkD,UAAU,0BAA2B,aAkEvC,wBAGA7C,EAAAC,EAAAC,cAAA,UACEI,KAAK,SACLqC,QAhEM,WACZ,IAAIlB,EAAM,IAAIqB,yBACdrB,EAAIO,KAAOA,EACXe,OAAOC,gBAAgBC,MAAMxB,IA8DvBtB,UAAU,6BAHZ,SAOAH,EAAAC,EAAAC,cAAA,UACEI,KAAK,SACLqC,QAhEiB,WACvB,IAGMO,EADSlB,EAAKmB,MAFN,aAGKC,KAAK,IACxBnB,EAAQiB,IA4DF/C,UAAU,6BAHZ,eAOAH,EAAAC,EAAAC,cAAA,UACEI,KAAK,SACLqC,QA9DmB,WAEzB,IAIIC,EAJSZ,EAAKqB,MAAM,IAAIC,UAIPF,KAAK,IAC1BnB,EAAQW,IAwDFzC,UAAU,6BAHZ,mBAQFH,EAAAC,EAAAC,cAAA,OACEC,UAAU,aACVC,MAAO,CACLP,MAAsB,SAAfF,EAAMG,KAAkB,QAAU,UAG3CE,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,SAEI8B,EAAKqB,MAAM,KAAKE,OAAO,SAACC,GACtB,OAA0B,IAAnBA,EAAQC,SACdA,OACH,IALJ,aAMazB,EAAKyB,OANlB,cAQAzD,EAAAC,EAAAC,cAAA,SACG,KACC8B,EAAKqB,MAAM,KAAKE,OAAO,SAACC,GACtB,OAA0B,IAAnBA,EAAQC,SACdA,OAAQ,IAJf,eAKe,KAEfzD,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,SAAI8B,EAAKyB,OAAS,EAAIzB,EAAO,8CChItB,SAAS0B,EAAO/D,GAC7B,OACEK,EAAAC,EAAAC,cAAA,OACEC,UAAS,kCAAAa,OAAoCrB,EAAMG,KAA1C,QAAAkB,OAAqDrB,EAAMG,OAEpEE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAACyD,EAAA,EAAD,CAAMxD,UAAU,eAAeyD,GAAG,KAAlC,UAMA5D,EAAAC,EAAAC,cAAA,UACEC,UAAU,iBACVG,KAAK,SACLC,iBAAe,WACfC,iBAAe,0BACfE,gBAAc,yBACdD,gBAAc,QACdoD,aAAW,qBAEX7D,EAAAC,EAAAC,cAAA,QAAMC,UAAU,yBAElBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BAA2BE,GAAG,0BAC3CL,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mCACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACZH,EAAAC,EAAAC,cAACyD,EAAA,EAAD,CAAMxD,UAAU,kBAAkB2D,eAAa,OAAOF,GAAG,KACtDjE,EAAMoE,QAMX/D,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACZH,EAAAC,EAAAC,cAACyD,EAAA,EAAD,CAAMxD,UAAU,kBAAkB2D,eAAa,OAAOF,GAAG,UACtDjE,EAAMqE,cAoBbhE,EAAAC,EAAAC,cAAA,OACEC,UAAU,YACVc,KAAK,QACL4C,aAAW,0BAEX7D,EAAAC,EAAAC,cAAA,UACEI,KAAK,SACLH,UAAS,mBAAAa,OACQ,UAAfrB,EAAMG,KAAmB,UAAY,QAEvC6C,QAAShD,EAAMsE,YACf7D,MAAO,CACLL,iBACEJ,EAAMG,KAAmB,eAC3BD,OAAOF,EAAMG,KAAmB,WATpC,cAcAE,EAAAC,EAAAC,cAAA,UACEI,KAAK,SACLH,UAAS,mBAAAa,OACQ,UAAfrB,EAAMG,KAAmB,UAAY,QAEvC6C,QAAShD,EAAMuE,aACf9D,MAAO,CACLL,iBACEJ,EAAMG,KAAmB,eAC3BD,OAAOF,EAAMG,KAAmB,SATpC,YAcAE,EAAAC,EAAAC,cAAA,UACEI,KAAK,SACLH,UAAS,mBAAAa,OACQ,UAAfrB,EAAMG,KAAmB,UAAY,OAD9B,KAGT6C,QAAShD,EAAMwE,aACf/D,MAAO,CACLL,iBACEJ,EAAMG,KAAmB,eAC3BD,OAAOF,EAAMG,KAAmB,YATpC,gBAiBFE,EAAAC,EAAAC,cAAA,QAAMC,UAAU,UACdH,EAAAC,EAAAC,cAAA,SACEC,UAAU,yBACVG,KAAK,SACL8D,YAAY,SACZP,aAAW,WAEb7D,EAAAC,EAAAC,cAAA,UAAQC,UAAU,0BAA0BG,KAAK,UAAjD,WAIFN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCACbH,EAAAC,EAAAC,cAAA,SACEyC,QAAShD,EAAM0E,WACflE,UAAU,mBACVG,KAAK,WAELD,GAAG,2BAELL,EAAAC,EAAAC,cAAA,SACEC,UAAS,0BAAAa,OACQ,UAAfrB,EAAMG,KAAmB,OAAS,QAD3B,KAGTwE,QAAQ,0BAJV,wBAmBZZ,EAAOa,aAAe,CAAER,MAAO,QAASC,WAAY,2BC5DrCQ,MA7Ef,WAAe,IAAA7C,EACWC,mBAAS,SADpBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACN7B,EADM+B,EAAA,GACA4C,EADA5C,EAAA,GAAA6C,EAEa9C,mBAAS,MAFtB+C,EAAA7C,OAAAC,EAAA,EAAAD,CAAA4C,EAAA,GAEN3D,EAFM4D,EAAA,GAECC,EAFDD,EAAA,GAIP9B,EAAY,SAACgC,EAASvE,GAC1BsE,EAAS,CACPnD,IAAKoD,EACLvE,KAAMA,IAERwE,WAAW,WACTF,EAAS,OACR,OA6BL,OACE5E,EAAAC,EAAAC,cAAAF,EAAAC,EAAAiC,SAAA,KACElC,EAAAC,EAAAC,cAACyD,EAAA,EAAD,KACE3D,EAAAC,EAAAC,cAACwD,EAAD,CACEK,MAAM,OACNC,WAAW,QACXlE,KAAMA,EACNuE,WAjCW,WACJ,UAATvE,GACF2E,EAAQ,QACRM,SAASC,KAAK5E,MAAML,gBAAkB,OACtC8C,EAAU,oBAAqB,WAC/BkC,SAAShB,MAAQ,yBAEjBU,EAAQ,SACRM,SAASC,KAAK5E,MAAML,gBAAkB,QACtC8C,EAAU,qBAAsB,WAChCkC,SAAShB,MAAQ,0BAwBbE,YApBY,WAClBQ,EAAQ,WACRM,SAASC,KAAK5E,MAAML,gBAAkB,SAmBhCmE,aAjBa,WACnBO,EAAQ,UACRM,SAASC,KAAK5E,MAAML,gBAAkB,OAgBhCoE,aAda,WACnBM,EAAQ,WACRM,SAASC,KAAK5E,MAAML,gBAAkB,YAclCC,EAAAC,EAAAC,cAAC+E,EAAD,CAAQlE,MAAOA,IAGff,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAEbH,EAAAC,EAAAC,cAACgF,EAAA,EAAD,KACElF,EAAAC,EAAAC,cAACgF,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,UAChBpF,EAAAC,EAAAC,cAACR,EAAD,CAAOI,KAAMA,KAGfE,EAAAC,EAAAC,cAACgF,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,KAChBpF,EAAAC,EAAAC,cAACwB,EAAD,CACEmB,UAAWA,EACXV,QAAQ,mBACRrC,KAAMA,UChEPuF,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAA8CD,EAA9CC,OAAQC,EAAsCF,EAAtCE,OAAQC,EAA8BH,EAA9BG,OAAQC,EAAsBJ,EAAtBI,OAAQC,EAAcL,EAAdK,QAC3DJ,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,MCDdY,IAASC,OACPnG,EAAAC,EAAAC,cAACF,EAAAC,EAAMmG,WAAP,KACEpG,EAAAC,EAAAC,cAACmG,EAAD,OAEFtB,SAASuB,eAAe,SAM1BjB","file":"static/js/main.17fbe7db.chunk.js","sourcesContent":["import React from \"react\";\r\n// import React, { useState } from \"react\";\r\n\r\nexport default function About(props) {\r\n  // const [mystyle, setmystyle] = useState({\r\n  //   color: \"white\",\r\n  //   backgroundColor: \"black\",\r\n  //   bordor: \"1px solid white\",\r\n  // });\r\n  // const [btnTxt, setbtnTxt] = useState(\"Enable light mode\");\r\n  let mystyle = {\r\n    color: props.mode === \"dark\" ? \"white\" : \"black\",\r\n    backgroundColor: props.mode === \"dark\" ? \"grey\" : \"white\",\r\n  };\r\n\r\n  return (\r\n    <div className=\"container my-2\" style={mystyle}>\r\n      <h1>About Us</h1>\r\n      <div className=\"accordion\" id=\"accordionExample\">\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingOne\">\r\n            <button\r\n              className=\"accordion-button\"\r\n              style={mystyle}\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseOne\"\r\n              aria-expanded=\"true\"\r\n              aria-controls=\"collapseOne\"\r\n            >\r\n              Accordion Item #1\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseOne\"\r\n            className=\"accordion-collapse collapse show\"\r\n            aria-labelledby=\"headingOne\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={mystyle}>\r\n              <strong>This is the first item's accordion body.</strong> It is\r\n              shown by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              style={mystyle}\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseTwo\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseTwo\"\r\n            >\r\n              Accordion Item #2\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseTwo\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingTwo\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={mystyle}>\r\n              <strong>This is the second item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingThree\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              style={mystyle}\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseThree\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseThree\"\r\n            >\r\n              Accordion Item #3\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseThree\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingThree\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={mystyle}>\r\n              <strong>This is the third item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Alerts(props) {\r\n  const capatlize = (word) => {\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  };\r\n  return (\r\n    <div style={{ height: \"50px\" }}>\r\n      {props.alert && (\r\n        <div\r\n          className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n          role=\"alert\"\r\n        >\r\n          <strong>{capatlize(props.alert.type)}</strong>: {props.alert.msg}\r\n          {/* <button\r\n          type=\"button\"\r\n          className=\"btn-close\"\r\n          data-bs-dismiss=\"alert\"\r\n          aria-label=\"Close\"\r\n        ></button> */}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Alerts;\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function Form(props) {\r\n  // converting to upper case\r\n  const handleUpClick = () => {\r\n    console.log(\"Upper case was clicked \" + text);\r\n    const newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to Upper  Case\", \"success\");\r\n\r\n    // setText(\"you have clicked on handle up click \")\r\n  };\r\n\r\n  //   converting to lower case\r\n  const handlelowClick = () => {\r\n    console.log(\"Upper case was clicked \" + text);\r\n    const newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to Lower Case\", \"success\");\r\n\r\n    // setText(\"you have clicked on handle up click \")\r\n  };\r\n\r\n  //   speak function\r\n  //   It is targetted by the button 'speak':\r\n  const speak = () => {\r\n    let msg = new SpeechSynthesisUtterance();\r\n    msg.text = text;\r\n    window.speechSynthesis.speak(msg);\r\n  };\r\n\r\n  //to extract only the numbers in the text:\r\n  const handleNumExtract = () => {\r\n    const regex = /[0-9/ /]/g;\r\n\r\n    const digits = text.match(regex);\r\n    const res = digits.join(\"\");\r\n    setText(res);\r\n  };\r\n\r\n  //   function for reversing any text:\r\n  const reverseTextHandler = () => {\r\n    /* Convert string to array*/\r\n    let strArr = text.split(\"\").reverse();\r\n    /* Reverse array*/\r\n    // strArr = strArr.reverse();\r\n    /* Convert array to string*/\r\n    let newText = strArr.join(\"\");\r\n    setText(newText);\r\n  };\r\n\r\n  const handleOnChange = (event) => {\r\n    console.log(\"on change \");\r\n    setText(event.target.value);\r\n    // console.log(event.target.value);\r\n  };\r\n  const [text, setText] = useState(\"\");\r\n  //   setText(\"new Text\");\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container\"\r\n        style={{\r\n          color: props.mode === \"dark\" ? \"white\" : \"black\",\r\n        }}\r\n      >\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            style={{\r\n              backgroundColor: props.mode === \"dark\" ? \"#13466e\" : \"white\",\r\n              color: props.mode === \"dark\" ? \"white\" : \"black\",\r\n            }}\r\n            className=\"form-control\"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            id=\"exampleFormControlTextarea1\"\r\n            rows=\"8\"\r\n          ></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary mx-1 my-1\" onClick={handleUpClick}>\r\n          Convrt To Upper Case\r\n        </button>\r\n        <button className=\"btn btn-primary mx-1 my-1\" onClick={handlelowClick}>\r\n          Convrt To Lower Case\r\n        </button>\r\n        <button\r\n          type=\"submit\"\r\n          onClick={speak}\r\n          className=\"btn btn-warning mx-2 my-1\"\r\n        >\r\n          Speak\r\n        </button>\r\n        <button\r\n          type=\"submit\"\r\n          onClick={handleNumExtract}\r\n          className=\"btn btn-warning mx-2 my-1\"\r\n        >\r\n          regix match\r\n        </button>\r\n        <button\r\n          type=\"submit\"\r\n          onClick={reverseTextHandler}\r\n          className=\"btn btn-warning mx-2 my-1\"\r\n        >\r\n          reverse a text\r\n        </button>\r\n      </div>\r\n      <div\r\n        className=\"container \"\r\n        style={{\r\n          color: props.mode === \"dark\" ? \"white\" : \"black\",\r\n        }}\r\n      >\r\n        <h1>Your Text Summary</h1>\r\n        <p>\r\n          {\r\n            text.split(\" \").filter((element) => {\r\n              return element.length !== 0;\r\n            }).length\r\n          }{\" \"}\r\n          words and {text.length} chaacters\r\n        </p>\r\n        <p>\r\n          {0.008 *\r\n            text.split(\" \").filter((element) => {\r\n              return element.length !== 0;\r\n            }).length}{\" \"}\r\n          minutes read{\" \"}\r\n        </p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length > 0 ? text : \"Enter Text To Preview it here\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { getQueriesForElement } from \"@testing-library/react\";\r\nimport { Link } from \"react-router-dom\";\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <Link className=\"navbar-brand\" to=\"/\">\r\n          Navbar\r\n        </Link>\r\n        {/* <a className=\"navbar-brand\" href=\"#\">\r\n          Navbar\r\n        </a> */}\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                {props.title}\r\n              </Link>\r\n              {/* <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                {props.title}\r\n              </a> */}\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/about\">\r\n                {props.titleabout}\r\n              </Link>\r\n              {/* <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">\r\n                {props.title}\r\n              </a> */}\r\n            </li>\r\n            {/* <li className=\"nav-item dropdown\">\r\n            <a className=\"nav-link dropdown-toggle\" href=\"/\" id=\"navbarDropdown\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n              Dropdown\r\n            </a>\r\n            <ul className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\r\n              <li><a className=\"dropdown-item\" href=\"/\">Action</a></li>\r\n              <li><a className=\"dropdown-item\" href=\"/\">Another action</a></li>\r\n              <li><hr className=\"dropdown-divider\"/></li>\r\n              <li><a className=\"dropdown-item\" href=\"/\">Something else here</a></li>\r\n            </ul>\r\n          </li> */}\r\n          </ul>\r\n\r\n          {/* color pallet control -------------------------------------------- */}\r\n          <div\r\n            className=\"btn-group\"\r\n            role=\"group\"\r\n            aria-label=\"Basic outlined example\"\r\n          >\r\n            <button\r\n              type=\"button\"\r\n              className={`btn btn-outline-${\r\n                props.mode === \"light\" ? \"success\" : \"dark\"\r\n              }`}\r\n              onClick={props.colorPallet}\r\n              style={{\r\n                backgroundColor:\r\n                  props.mode === \"light\" ? \"transparent\" : \"transparent\",\r\n                color: props.mode === \"light\" ? \"green\" : \"green\",\r\n              }}\r\n            >\r\n              Green Mode\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              className={`btn btn-outline-${\r\n                props.mode === \"light\" ? \"warning\" : \"dark\"\r\n              }`}\r\n              onClick={props.colorPallet2}\r\n              style={{\r\n                backgroundColor:\r\n                  props.mode === \"light\" ? \"transparent\" : \"transparent\",\r\n                color: props.mode === \"light\" ? \"red\" : \"red\",\r\n              }}\r\n            >\r\n              Red mode\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              className={`btn btn-outline-${\r\n                props.mode === \"light\" ? \"warning\" : \"dark\"\r\n              } `}\r\n              onClick={props.colorPallet3}\r\n              style={{\r\n                backgroundColor:\r\n                  props.mode === \"light\" ? \"transparent\" : \"transparent\",\r\n                color: props.mode === \"light\" ? \"yellow\" : \"yellow\",\r\n              }}\r\n            >\r\n              Yellow Mode\r\n            </button>\r\n          </div>\r\n\r\n          {/* end--------------------------------------------------------------------- */}\r\n          <form className=\"d-flex\">\r\n            <input\r\n              className=\"form-control me-2 mx-3\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-outline-success\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form>\r\n          <div className=\"form-check form-switch mx-3  \">\r\n            <input\r\n              onClick={props.toggleMode}\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              // role=\"switch\"\r\n              id=\"flexSwitchCheckDefault\"\r\n            />\r\n            <label\r\n              className={` form-check-label text-${\r\n                props.mode === \"light\" ? \"dark\" : \"light\" //turnery operator is used here details are in the copy//\r\n              } `}\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              Enable Dark Mode\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  titleabout: PropTypes.string,\r\n};\r\nNavbar.defaultProps = { title: \"Home2\", titleabout: \"insert about\" };\r\n","import React, { useState } from \"react\";\n// import  from \"react\";\nimport \"./App.css\";\nimport About from \"./components/About\";\nimport Alerts from \"./components/Alerts\";\nimport Form from \"./components/Form\";\nimport Navbar from \"./components/Navbar\";\n// import { Routes, Route } from \"react-router-dom\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"grey\";\n      showAlert(\"Dark mode enables\", \"success\");\n      document.title = \"TextUtils -Dark Mode\";\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode enables\", \"success\");\n      document.title = \"TextUtils -Light Mode\";\n    }\n  };\n\n  const colorpallet = () => {\n    setMode(\"success\");\n    document.body.style.backgroundColor = \"green\";\n  };\n  const colorpallet2 = () => {\n    setMode(\"danger\");\n    document.body.style.backgroundColor = \"red\";\n  };\n  const colorpallet3 = () => {\n    setMode(\"warning\");\n    document.body.style.backgroundColor = \"yellow\";\n  };\n  return (\n    <>\n      <Router>\n        <Navbar\n          title=\"Home\"\n          titleabout=\"about\"\n          mode={mode}\n          toggleMode={toggleMode}\n          colorPallet={colorpallet}\n          colorPallet2={colorpallet2}\n          colorPallet3={colorpallet3}\n        />\n        <Alerts alert={alert} />\n        {/* <Navbar /> */}\n\n        <div className=\"container my-3\">\n          {/* //exact is used to match exactly same url otherwise it will match partially// */}\n          <Switch>\n            <Route exact path=\"/about\">\n              <About mode={mode} />\n            </Route>\n\n            <Route exact path=\"/\">\n              <Form\n                showAlert={showAlert}\n                heading=\"Enter Text Below\"\n                mode={mode}\n              />\n            </Route>\n          </Switch>\n        </div>\n        {/* <About /> */}\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}