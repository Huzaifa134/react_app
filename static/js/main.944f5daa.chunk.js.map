{"version":3,"sources":["components/Alerts.js","components/Form.js","components/Navbar.js","App.js","reportWebVitals.js","index.js"],"names":["Alerts","props","alert","react_default","a","createElement","className","concat","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capatlize","msg","Form","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","mode","heading","backgroundColor","value","onChange","event","console","log","target","id","rows","onClick","newText","showAlert","SpeechSynthesisUtterance","window","speechSynthesis","speak","res","match","join","split","reverse","length","Navbar","href","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","aria-current","title","colorPallet","colorPallet2","colorPallet3","placeholder","toggleMode","htmlFor","defaultProps","titleabout","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","document","body","components_Alerts","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","getElementById"],"mappings":"6KAyBeA,MAvBf,SAAgBC,GAKd,OACEA,EAAMC,OACJC,EAAAC,EAAAC,cAAA,OACEC,UAAS,eAAAC,OAAiBN,EAAMC,MAAMM,KAA7B,gCACTC,KAAK,SAELN,EAAAC,EAAAC,cAAA,cAVY,SAACK,GACjB,IAAMC,EAAQD,EAAKE,cACnB,OAAOD,EAAME,OAAO,GAAGC,cAAgBH,EAAMI,MAAM,GAQtCC,CAAUf,EAAMC,MAAMM,OAJjC,KAImDP,EAAMC,MAAMe,MCXtD,SAASC,EAAKjB,GAE3B,IAFkCkB,EAsDVC,mBAAS,IAtDCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAsD3BK,EAtD2BH,EAAA,GAsDrBI,EAtDqBJ,EAAA,GAyDlC,OACElB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAsB,SAAA,KACEvB,EAAAC,EAAAC,cAAA,OACEC,UAAU,YACVqB,MAAO,CACLC,MAAsB,SAAf3B,EAAM4B,KAAkB,QAAU,UAG3C1B,EAAAC,EAAAC,cAAA,UAAKJ,EAAM6B,SACX3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,YACEsB,MAAO,CACLI,gBAAgC,UAAf9B,EAAM4B,KAAmB,QAAU,OACpDD,MAAsB,SAAf3B,EAAM4B,KAAkB,QAAU,SAE3CvB,UAAU,eACV0B,MAAOR,EACPS,SAzBa,SAACC,GACtBC,QAAQC,IAAI,cACZX,EAAQS,EAAMG,OAAOL,QAwBbM,GAAG,8BACHC,KAAK,OAGTpC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uBAAuBkC,QA7EzB,WACpBL,QAAQC,IAAI,0BAA4BZ,GACxC,IAAMiB,EAAUjB,EAAKV,cACrBW,EAAQgB,GACRxC,EAAMyC,UAAU,2BAA4B,aAyExC,wBAGAvC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uBAAuBkC,QAtExB,WACrBL,QAAQC,IAAI,0BAA4BZ,GACxC,IAAMiB,EAAUjB,EAAKZ,cACrBa,EAAQgB,GACRxC,EAAMyC,UAAU,0BAA2B,aAkEvC,wBAGAvC,EAAAC,EAAAC,cAAA,UAAQG,KAAK,SAASgC,QA9Dd,WACZ,IAAIvB,EAAM,IAAI0B,yBACd1B,EAAIO,KAAOA,EACXoB,OAAOC,gBAAgBC,MAAM7B,IA2DaX,UAAU,yBAAhD,SAGAH,EAAAC,EAAAC,cAAA,UACEG,KAAK,SACLgC,QA5DiB,WACvB,IAGMO,EADSvB,EAAKwB,MAFN,aAGKC,KAAK,IACxBxB,EAAQsB,IAwDFzC,UAAU,wBAHZ,eAOAH,EAAAC,EAAAC,cAAA,UACEG,KAAK,SACLgC,QA1DmB,WAEzB,IAIIC,EAJSjB,EAAK0B,MAAM,IAAIC,UAIPF,KAAK,IAC1BxB,EAAQgB,IAoDFnC,UAAU,wBAHZ,mBAQFH,EAAAC,EAAAC,cAAA,OACEC,UAAU,aACVqB,MAAO,CACLC,MAAsB,SAAf3B,EAAM4B,KAAkB,QAAU,UAG3C1B,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,SACGmB,EAAK0B,MAAM,KAAKE,OAAS,EAD5B,cAC0C5B,EAAK4B,OAD/C,cAGAjD,EAAAC,EAAAC,cAAA,SAAI,KAAQmB,EAAK0B,MAAM,KAAKE,OAA5B,kBACAjD,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,SAAImB,EAAK4B,OAAS,EAAI5B,EAAO,mCCjHtB,SAAS6B,EAAOpD,GAC7B,OACEE,EAAAC,EAAAC,cAAA,OACEC,UAAS,kCAAAC,OAAoCN,EAAM4B,KAA1C,QAAAtB,OAAqDN,EAAM4B,OAEpE1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAIbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAegD,KAAK,KAAjC,UAGAnD,EAAAC,EAAAC,cAAA,UACEC,UAAU,iBACVE,KAAK,SACL+C,iBAAe,WACfC,iBAAe,0BACfC,gBAAc,yBACdC,gBAAc,QACdC,aAAW,qBAEXxD,EAAAC,EAAAC,cAAA,QAAMC,UAAU,yBAElBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BAA2BgC,GAAG,0BAC3CnC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mCACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAIZH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAkBsD,eAAa,OAAON,KAAK,KACrDrD,EAAM4D,QAGX1D,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAsBhBH,EAAAC,EAAAC,cAAA,OACEC,UAAU,YACVG,KAAK,QACLkD,aAAW,0BAEXxD,EAAAC,EAAAC,cAAA,UACEG,KAAK,SACLF,UAAS,mBAAAC,OACQ,UAAfN,EAAM4B,KAAmB,UAAY,QAEvCW,QAASvC,EAAM6D,YACfnC,MAAO,CACLI,iBACE9B,EAAM4B,KAAmB,eAC3BD,OAAO3B,EAAM4B,KAAmB,WATpC,cAcA1B,EAAAC,EAAAC,cAAA,UACEG,KAAK,SACLF,UAAS,mBAAAC,OACQ,UAAfN,EAAM4B,KAAmB,UAAY,QAEvCW,QAASvC,EAAM8D,aACfpC,MAAO,CACLI,iBACE9B,EAAM4B,KAAmB,eAC3BD,OAAO3B,EAAM4B,KAAmB,SATpC,YAcA1B,EAAAC,EAAAC,cAAA,UACEG,KAAK,SACLF,UAAS,mBAAAC,OACQ,UAAfN,EAAM4B,KAAmB,UAAY,OAD9B,KAGTW,QAASvC,EAAM+D,aACfrC,MAAO,CACLI,iBACE9B,EAAM4B,KAAmB,eAC3BD,OAAO3B,EAAM4B,KAAmB,YATpC,gBAiBF1B,EAAAC,EAAAC,cAAA,QAAMC,UAAU,UACdH,EAAAC,EAAAC,cAAA,SACEC,UAAU,yBACVE,KAAK,SACLyD,YAAY,SACZN,aAAW,WAEbxD,EAAAC,EAAAC,cAAA,UAAQC,UAAU,0BAA0BE,KAAK,UAAjD,WAIFL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCACbH,EAAAC,EAAAC,cAAA,SACEmC,QAASvC,EAAMiE,WACf5D,UAAU,mBACVE,KAAK,WAEL8B,GAAG,2BAELnC,EAAAC,EAAAC,cAAA,SACEC,UAAS,0BAAAC,OACQ,UAAfN,EAAM4B,KAAmB,OAAS,QAD3B,KAGTsC,QAAQ,0BAJV,wBAmBZd,EAAOe,aAAe,CAAEP,MAAO,QAASQ,WAAY,gBChErCC,MAzEf,WAAe,IAAAnD,EACWC,mBAAS,SADpBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNU,EADMR,EAAA,GACAkD,EADAlD,EAAA,GAAAmD,EAEapD,mBAAS,MAFtBqD,EAAAnD,OAAAC,EAAA,EAAAD,CAAAkD,EAAA,GAENtE,EAFMuE,EAAA,GAECC,EAFDD,EAAA,GAIP/B,EAAY,SAACiC,EAASnE,GAC1BkE,EAAS,CACPzD,IAAK0D,EACLnE,KAAMA,IAERoE,WAAW,WACTF,EAAS,OACR,OA6BL,OACEvE,EAAAC,EAAAC,cAAAF,EAAAC,EAAAsB,SAAA,KAEEvB,EAAAC,EAAAC,cAACgD,EAAD,CACEQ,MAAM,OACNQ,WAAW,QACXxC,KAAMA,EACNqC,WAjCa,WACJ,UAATrC,GACF0C,EAAQ,QACRM,SAASC,KAAKnD,MAAMI,gBAAkB,OACtCW,EAAU,oBAAqB,WAC/BmC,SAAShB,MAAQ,yBAEjBU,EAAQ,SACRM,SAASC,KAAKnD,MAAMI,gBAAkB,QACtCW,EAAU,qBAAsB,WAChCmC,SAAShB,MAAQ,0BAwBfC,YApBc,WAClBS,EAAQ,WACRM,SAASC,KAAKnD,MAAMI,gBAAkB,SAmBlCgC,aAjBe,WACnBQ,EAAQ,UACRM,SAASC,KAAKnD,MAAMI,gBAAkB,OAgBlCiC,aAde,WACnBO,EAAQ,WACRM,SAASC,KAAKnD,MAAMI,gBAAkB,YAcpC5B,EAAAC,EAAAC,cAAC0E,EAAD,CAAQ7E,MAAOA,IAGfC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAQbH,EAAAC,EAAAC,cAACa,EAAD,CAAMwB,UAAWA,EAAWZ,QAAQ,mBAAmBD,KAAMA,OC7DtDmD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAA8CD,EAA9CC,OAAQC,EAAsCF,EAAtCE,OAAQC,EAA8BH,EAA9BG,OAAQC,EAAsBJ,EAAtBI,OAAQC,EAAcL,EAAdK,QAC3DJ,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,MCDdY,IAASC,OACP3F,EAAAC,EAAAC,cAACF,EAAAC,EAAM2F,WAAP,KACE5F,EAAAC,EAAAC,cAAC2F,EAAD,OAEFnB,SAASoB,eAAe,SAM1BjB","file":"static/js/main.944f5daa.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Alerts(props) {\r\n  const capatlize = (word) => {\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  };\r\n  return (\r\n    props.alert && (\r\n      <div\r\n        className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n        role=\"alert\"\r\n      >\r\n        <strong>{capatlize(props.alert.type)}</strong>: {props.alert.msg}\r\n        {/* <button\r\n          type=\"button\"\r\n          className=\"btn-close\"\r\n          data-bs-dismiss=\"alert\"\r\n          aria-label=\"Close\"\r\n        ></button> */}\r\n      </div>\r\n    )\r\n  );\r\n}\r\n\r\nexport default Alerts;\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function Form(props) {\r\n  // converting to upper case\r\n  const handleUpClick = () => {\r\n    console.log(\"Upper case was clicked \" + text);\r\n    const newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to Upper  Case\", \"success\");\r\n\r\n    // setText(\"you have clicked on handle up click \")\r\n  };\r\n\r\n  //   converting to lower case\r\n  const handlelowClick = () => {\r\n    console.log(\"Upper case was clicked \" + text);\r\n    const newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to Lower Case\", \"success\");\r\n\r\n    // setText(\"you have clicked on handle up click \")\r\n  };\r\n\r\n  //   speak function\r\n  //   It is targetted by the button 'speak':\r\n  const speak = () => {\r\n    let msg = new SpeechSynthesisUtterance();\r\n    msg.text = text;\r\n    window.speechSynthesis.speak(msg);\r\n  };\r\n\r\n  //to extract only the numbers in the text:\r\n  const handleNumExtract = () => {\r\n    const regex = /[0-9/ /]/g;\r\n\r\n    const digits = text.match(regex);\r\n    const res = digits.join(\"\");\r\n    setText(res);\r\n  };\r\n\r\n  //   function for reversing any text:\r\n  const reverseTextHandler = () => {\r\n    /* Convert string to array*/\r\n    let strArr = text.split(\"\").reverse();\r\n    /* Reverse array*/\r\n    // strArr = strArr.reverse();\r\n    /* Convert array to string*/\r\n    let newText = strArr.join(\"\");\r\n    setText(newText);\r\n  };\r\n\r\n  const handleOnChange = (event) => {\r\n    console.log(\"on change \");\r\n    setText(event.target.value);\r\n    // console.log(event.target.value);\r\n  };\r\n  const [text, setText] = useState(\"\");\r\n  //   setText(\"new Text\");\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container\"\r\n        style={{\r\n          color: props.mode === \"dark\" ? \"white\" : \"black\",\r\n        }}\r\n      >\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            style={{\r\n              backgroundColor: props.mode === \"light\" ? \"white\" : \"grey\",\r\n              color: props.mode === \"dark\" ? \"white\" : \"black\",\r\n            }}\r\n            className=\"form-control\"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            id=\"exampleFormControlTextarea1\"\r\n            rows=\"8\"\r\n          ></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>\r\n          Convrt To Upper Case\r\n        </button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handlelowClick}>\r\n          Convrt To Lower Case\r\n        </button>\r\n        <button type=\"submit\" onClick={speak} className=\"btn btn-warning mx-2 \">\r\n          Speak\r\n        </button>\r\n        <button\r\n          type=\"submit\"\r\n          onClick={handleNumExtract}\r\n          className=\"btn btn-warning mx-2\"\r\n        >\r\n          regix match\r\n        </button>\r\n        <button\r\n          type=\"submit\"\r\n          onClick={reverseTextHandler}\r\n          className=\"btn btn-warning mx-2\"\r\n        >\r\n          reverse a text\r\n        </button>\r\n      </div>\r\n      <div\r\n        className=\"container \"\r\n        style={{\r\n          color: props.mode === \"dark\" ? \"white\" : \"black\",\r\n        }}\r\n      >\r\n        <h1>Your Text Summary</h1>\r\n        <p>\r\n          {text.split(\" \").length - 1} words and {text.length} chaacters\r\n        </p>\r\n        <p>{0.008 * text.split(\" \").length} minutes read </p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length > 0 ? text : \"Enter Text To Preview it here\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { getQueriesForElement } from \"@testing-library/react\";\r\n// import { Link } from \"react-router-dom\";\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        {/* <Link className=\"navbar-brand\" to=\"/\">\r\n          Navbar\r\n        </Link> */}\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          Navbar\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                {props.title}\r\n              </Link> */}\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                {props.title}\r\n              </a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                {props.title}\r\n              </Link> */}\r\n              {/* <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">\r\n                {props.title}\r\n              </a> */}\r\n            </li>\r\n            {/* <li className=\"nav-item dropdown\">\r\n            <a className=\"nav-link dropdown-toggle\" href=\"/\" id=\"navbarDropdown\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n              Dropdown\r\n            </a>\r\n            <ul className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\r\n              <li><a className=\"dropdown-item\" href=\"/\">Action</a></li>\r\n              <li><a className=\"dropdown-item\" href=\"/\">Another action</a></li>\r\n              <li><hr className=\"dropdown-divider\"/></li>\r\n              <li><a className=\"dropdown-item\" href=\"/\">Something else here</a></li>\r\n            </ul>\r\n          </li> */}\r\n          </ul>\r\n\r\n          {/* color pallet control -------------------------------------------- */}\r\n          <div\r\n            className=\"btn-group\"\r\n            role=\"group\"\r\n            aria-label=\"Basic outlined example\"\r\n          >\r\n            <button\r\n              type=\"button\"\r\n              className={`btn btn-outline-${\r\n                props.mode === \"light\" ? \"success\" : \"dark\"\r\n              }`}\r\n              onClick={props.colorPallet}\r\n              style={{\r\n                backgroundColor:\r\n                  props.mode === \"light\" ? \"transparent\" : \"transparent\",\r\n                color: props.mode === \"light\" ? \"green\" : \"green\",\r\n              }}\r\n            >\r\n              Green Mode\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              className={`btn btn-outline-${\r\n                props.mode === \"light\" ? \"warning\" : \"dark\"\r\n              }`}\r\n              onClick={props.colorPallet2}\r\n              style={{\r\n                backgroundColor:\r\n                  props.mode === \"light\" ? \"transparent\" : \"transparent\",\r\n                color: props.mode === \"light\" ? \"red\" : \"red\",\r\n              }}\r\n            >\r\n              Red mode\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              className={`btn btn-outline-${\r\n                props.mode === \"light\" ? \"warning\" : \"dark\"\r\n              } `}\r\n              onClick={props.colorPallet3}\r\n              style={{\r\n                backgroundColor:\r\n                  props.mode === \"light\" ? \"transparent\" : \"transparent\",\r\n                color: props.mode === \"light\" ? \"yellow\" : \"yellow\",\r\n              }}\r\n            >\r\n              Yellow Mode\r\n            </button>\r\n          </div>\r\n\r\n          {/* end--------------------------------------------------------------------- */}\r\n          <form className=\"d-flex\">\r\n            <input\r\n              className=\"form-control me-2 mx-3\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-outline-success\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form>\r\n          <div className=\"form-check form-switch mx-3  \">\r\n            <input\r\n              onClick={props.toggleMode}\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              // role=\"switch\"\r\n              id=\"flexSwitchCheckDefault\"\r\n            />\r\n            <label\r\n              className={` form-check-label text-${\r\n                props.mode === \"light\" ? \"dark\" : \"light\" //turnery operator is used here details are in the copy//\r\n              } `}\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              Enable Dark Mode\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  titleabout: PropTypes.string,\r\n};\r\nNavbar.defaultProps = { title: \"Home2\", titleabout: \"insert about\" };\r\n","import React, { useState } from \"react\";\n// import  from \"react\";\nimport \"./App.css\";\n// import About from \"./components/About\";\nimport Alerts from \"./components/Alerts\";\nimport Form from \"./components/Form\";\nimport Navbar from \"./components/Navbar\";\n// import { Routes, Route } from \"react-router-dom\";\n// import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"grey\";\n      showAlert(\"Dark mode enables\", \"success\");\n      document.title = \"TextUtils -Dark Mode\";\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode enables\", \"success\");\n      document.title = \"TextUtils -Light Mode\";\n    }\n  };\n\n  const colorpallet = () => {\n    setMode(\"success\");\n    document.body.style.backgroundColor = \"green\";\n  };\n  const colorpallet2 = () => {\n    setMode(\"danger\");\n    document.body.style.backgroundColor = \"red\";\n  };\n  const colorpallet3 = () => {\n    setMode(\"warning\");\n    document.body.style.backgroundColor = \"yellow\";\n  };\n  return (\n    <>\n      {/* <Router> */}\n      <Navbar\n        title=\"Home\"\n        titleabout=\"about\"\n        mode={mode}\n        toggleMode={toggleMode}\n        colorPallet={colorpallet}\n        colorPallet2={colorpallet2}\n        colorPallet3={colorpallet3}\n      />\n      <Alerts alert={alert} />\n      {/* <Navbar /> */}\n\n      <div className=\"container my-3\">\n        {/* //exact is used to match exactly same url otherwise it will match partially// */}\n        {/* <Switch>\n            <Route exact path=\"/about\">\n              <About />\n            </Route> */}\n\n        {/* <Route exact path=\"/\"> */}\n        <Form showAlert={showAlert} heading=\"Enter Text Below\" mode={mode} />\n        {/* </Route> */}\n        {/* </Switch> */}\n      </div>\n      {/* <About /> */}\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}